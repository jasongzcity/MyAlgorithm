结合中序遍历和后序遍历得到二叉树(#106),可知先序遍历和后序遍历无法得到一颗二叉树.
考虑两个例子(用层次遍历表示): [1,3,null,5,7] 和[1,null,3,5,7] 这两棵树的先序遍历是一样的,
后序遍历也是一样的,那么, 就无法通过这两种遍历来确定一棵二叉树.

究其根本,就是这两种遍历无法确定其他节点的左右次序. 教科书上的说法:
"先序后序遍历确定了父子间的关系,却没有表明左右子树的能力"

迭代方法的解析:
two-pointer 先序中序两个指针
这是一个先序遍历.....
整个程序思路: 沿着"左路" 左子树支线一直压入栈到最左子节点(当和中序值相等时.), 此时检查栈顶和
中序位置的当前值,当相等时,说明当前节点无右孩子,向上返回(while).